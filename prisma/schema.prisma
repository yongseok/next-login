// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role    @default(USER)
  galleries Gallery[]
  uploadedFiles GalleryFile[] @relation("UploadedFiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Gallery {
  id String @id @default(cuid())
  title String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files GalleryFile[]
}

model GalleryFile {
  id        String   @id @default(cuid())
  /// 저장소(S3, 로컬 등)에서 파일에 접근하기 위한 경로 또는 전체 URL
  url       String
  /// 사용자가 업로드한 원본 파일 이름 (e.g., "jeju_photo.jpg")
  filename  String
  /// 파일의 MIME 타입 (e.g., "image/jpeg", "video/mp4")
  mimetype  String
  /// 파일 크기 (bytes 단위)
  size      Int
  createdAt DateTime @default(now())

  // 관계: 파일은 하나의 갤러리(Gallery)에 속합니다.
  galleryId String?
  gallery   Gallery?  @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  // 관계: 파일은 한 명의 업로더(User)에 의해 업로드됩니다.
  uploaderId String
  uploader   User     @relation("UploadedFiles", fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([galleryId])
}